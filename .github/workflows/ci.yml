# .github/workflows/ci.yml
name: CI Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  setup:
    name: Setup environment
    runs-on: ubuntu-22.04
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: cache-key
        run: echo "value=${{ github.sha }}-$(date +'%s')" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            ~/.cache/pip
            venv/
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-deps-${{ hashFiles('**/requirements.txt') }}-${{ steps.cache-key.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-deps-${{ hashFiles('**/requirements.txt') }}-

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -e .[dev,test]

      - name: Save virtual environment
        run: |
          # Créer un archive de l'environnement virtuel
          tar -czf venv.tar.gz venv/

      - name: Upload virtual environment
        uses: actions/upload-artifact@v4
        with:
          name: python-venv
          path: venv.tar.gz
          retention-days: 1

  unit-test:
    name: Unit tests
    runs-on: ubuntu-22.04
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important pour setuptools-scm
      - name: Download virtual environment
        uses: actions/download-artifact@v4
        with:
          name: python-venv

      - name: Restore virtual environment
        run: |
          tar -xzf venv.tar.gz
          rm venv.tar.gz

      - name: Run unit tests
        run: |
          source venv/bin/activate
          pytest tests/unit/ -v --no-cov

  integration-test:
    name: Integration tests
    runs-on: ubuntu-22.04
    needs: unit-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important pour setuptools-scm

      - name: Download virtual environment
        uses: actions/download-artifact@v4
        with:
          name: python-venv

      - name: Restore virtual environment
        run: |
          tar -xzf venv.tar.gz
          rm venv.tar.gz

      - name: Run tests
        run: |
          source venv/bin/activate
          pytest tests/integration/ -v  --no-cov

  coverage:
    name: All tests with coverage
    runs-on: ubuntu-22.04
    needs: [unit-test, integration-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important pour setuptools-scm

      - name: Download virtual environment
        uses: actions/download-artifact@v4
        with:
          name: python-venv

      - name: Restore virtual environment
        run: |
          tar -xzf venv.tar.gz
          rm venv.tar.gz

      - name: Run all tests with coverage
        run: |
          source venv/bin/activate
          pytest tests/ -v --cov=trading_system --cov-report=xml --tb=short

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: tests
          name: codecov-umbrella

  compatibility-test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-22.04
    needs: [unit-test, integration-test, coverage]
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-22.04]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Important pour setuptools-scm

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install -e .[dev,test]

    - name: Run all tests
      run: |
        pytest tests/ -v --tb=short

  lint:
    name: Linting and Code Quality
    runs-on: ubuntu-22.04
    needs: [unit-test, integration-test, coverage, compatibility-test]
    continue-on-error: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download virtual environment
      uses: actions/download-artifact@v4
      with:
        name: python-venv

    - name: Restore virtual environment
      run: |
        tar -xzf venv.tar.gz
        rm venv.tar.gz

    - name: Run flake8 (warning only)
      run: |
        source venv/bin/activate
        flake8 src/ --max-line-length=88 --extend-ignore=E203,E501 || echo "⚠️ flake8 issues found"

    - name: Run black check (warning only)
      run: |
        source venv/bin/activate
        black --check src/ tests/ || echo "⚠️ black formatting issues found"

    - name: Run isort check (warning only)
      run: |
        source venv/bin/activate
        isort --check-only src/ tests/ || echo "⚠️ isort issues found"

    - name: Run mypy (warning only)
      run: |
        source venv/bin/activate
        mypy src/ --ignore-missing-imports || echo "⚠️ mypy type issues found"

  security:
    name: Security Scan
    runs-on: ubuntu-22.04
    needs: [unit-test, integration-test, coverage, compatibility-test]
    continue-on-error: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Run safety check
      run: |
        pip install safety
        safety check --full-report

    - name: Run bandit
      run: |
        pip install bandit
        bandit -r src/ -ll

  build:
    name: Build Package
    runs-on: ubuntu-22.04
    needs: [unit-test, integration-test, coverage, compatibility-test, lint, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Build package
      run: |
        pip install build
        python -m build

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: trading-system-package
        path: dist/

#  train-model:
#    runs-on: ubuntu-latest
#    needs: test
#    if: github.ref == 'refs/heads/main'
#    steps:
#    - uses: actions/checkout@v4
#    - name: Train model
#      run: |
#        python scripts/train_model.py
#      env:
#        ALPHAVANTAGE_API_KEY: ${{ secrets.ALPHAVANTAGE_API_KEY }}
#    - name: Upload model
#      uses: actions/upload-artifact@v3
#      with:
#        name: ml-models
#        path: models/

#  deploy:
#    runs-on: ubuntu-latest
#    needs: [test, train-model]
#    if: github.ref == 'refs/heads/main'
#    steps:
#    - uses: actions/checkout@v4
#    - name: Deploy to cloud
#      run: |
#        python scripts/deploy.py
